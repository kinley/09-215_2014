/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelapplication;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author DEAkishin
 */
public class RoomsPanel extends javax.swing.JPanel {

    //private JTable table = new JTable();
    private Statement stmt = null;

    /**
     * Creates new form RoomsPanel
     */
    public RoomsPanel() {
        this.stmt = HotelForm.stmt;
        initComponents();
        getItems();
    }

    //Запрос - все комнаты
    private String roomsQuery() {
        String query = "SELECT number, floor, type, "
                + "class, view , price FROM rooms, roomtypes, roomclasses, roomviews "
                + "WHERE rooms.type_id = roomtypes.id "
                + "AND rooms.class_id = roomclasses.id "
                + "AND rooms.view_id = roomviews.id";

        query += " AND price <= " + priceSpinner.getValue().toString();
        if (floorBox.getSelectedIndex() > 0) {
            query += " AND floor = " + floorBox.getSelectedItem();
        }
        if (typeBox.getSelectedIndex() > 0) {
            query += " AND type_id = " + typeIDs.get(typeBox.getSelectedIndex() - 1);
        }
        if (classBox.getSelectedIndex() > 0) {
            query += " AND class_id = " + classIDs.get(classBox.getSelectedIndex() - 1);
        }
        if (viewBox.getSelectedIndex() > 0) {
            query += " AND view_id = " + viewIDs.get(viewBox.getSelectedIndex() - 1);
        }

        if (!showReservedBox.isSelected()) {
            query += " AND (SELECT count(room_number) FROM reservations "
                    + "WHERE room_number = rooms.number "
                    + "AND curdate()>date_begin AND curdate()<date_end)=0";
        }

        if (!showRegisteredBox.isSelected()) {
            query += " AND (SELECT count(room_number) FROM registrations "
                    + "WHERE archived=0 AND room_number = rooms.number)=0";
        }

        query += " ORDER BY number";

        return query;
    }

    //массивы id, чтобы заново их не искать
    private ArrayList<Integer> typeIDs = new ArrayList<>();
    private ArrayList<Integer> classIDs = new ArrayList<>();
    private ArrayList<Integer> viewIDs = new ArrayList<>();

    //получение элементов для полей ввода
    private void getItems() {
        floorBox.addItem("");
        for (int i = 1; i <= 4; i++) {
            floorBox.addItem(i);
        }

        typeBox.addItem("");
        try {
            ResultSet results;
            results = stmt.executeQuery("SELECT id, type FROM roomtypes;");
            while (results.next()) {
                typeBox.addItem(results.getString(2));
                typeIDs.add(results.getInt(1));
            }
            results.close();
        } catch (SQLException ex) {
            Logger.getLogger(TablesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        classBox.addItem("");
        try {
            ResultSet results;
            results = stmt.executeQuery("SELECT id, class FROM roomclasses;");
            while (results.next()) {
                classBox.addItem(results.getString(2));
                classIDs.add(results.getInt(1));
            }
            results.close();
        } catch (SQLException ex) {
            Logger.getLogger(TablesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        viewBox.addItem("");
        try {
            ResultSet results;
            results = stmt.executeQuery("SELECT id, view FROM roomviews;");
            while (results.next()) {
                viewBox.addItem(results.getString(2));
                viewIDs.add(results.getInt(1));
            }
            results.close();
        } catch (SQLException ex) {
            Logger.getLogger(TablesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        clearInputBoxes();
    }

    //очищение полей ввода
    private void clearInputBoxes() {
        floorBox.setSelectedIndex(-1);
        typeBox.setSelectedIndex(-1);
        classBox.setSelectedIndex(-1);
        viewBox.setSelectedIndex(-1);
        priceSpinner.setValue(3000);
        showReservedBox.setSelected(false);
        showReservedBox.setSelected(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        floorBox = new javax.swing.JComboBox();
        typeBox = new javax.swing.JComboBox();
        classBox = new javax.swing.JComboBox();
        viewBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        priceSpinner = new javax.swing.JSpinner();
        roomsTablePane = new javax.swing.JScrollPane();
        roomsTable = new javax.swing.JTable();
        showReservedBox = new javax.swing.JCheckBox();
        showRegisteredBox = new javax.swing.JCheckBox();

        jLabel1.setText("ПОИСК НОМЕРА");

        jLabel3.setText("Этаж");

        jLabel4.setText("Тип");

        jLabel5.setText("Класс");

        jLabel6.setText("Вид из окна");

        jLabel7.setText("Макс. цена");

        searchButton.setText("Искать");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        priceSpinner.setModel(new javax.swing.SpinnerNumberModel(3000, 1000, 15000, 100));

        roomsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        roomsTablePane.setViewportView(roomsTable);

        showReservedBox.setText("Показать забронированные");
        showReservedBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showReservedBoxActionPerformed(evt);
            }
        });

        showRegisteredBox.setText("Показать занятые");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(floorBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(classBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(priceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showReservedBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showRegisteredBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roomsTablePane, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(floorBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(classBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showReservedBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(priceSpinner)
                            .addComponent(showRegisteredBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(roomsTablePane, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        //названия столбцов таблицы
        String[] columnNames = {"номер", "этаж", "тип", "класс", "вид", "цена"};
        try {
            ResultSet results;
            results = stmt.executeQuery(roomsQuery());
            roomsTable.setModel(new MyTableModel(results, columnNames));
            results.close();
        } catch (SQLException ex) {
            Logger.getLogger(TablesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void showReservedBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showReservedBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showReservedBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox classBox;
    private javax.swing.JComboBox floorBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSpinner priceSpinner;
    private javax.swing.JTable roomsTable;
    private javax.swing.JScrollPane roomsTablePane;
    private javax.swing.JButton searchButton;
    private javax.swing.JCheckBox showRegisteredBox;
    private javax.swing.JCheckBox showReservedBox;
    private javax.swing.JComboBox typeBox;
    private javax.swing.JComboBox viewBox;
    // End of variables declaration//GEN-END:variables
}
